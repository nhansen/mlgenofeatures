configfile: "config/config.yaml"

def component_geno_featurefiles(wildcards):
    alleles = wildcards.genotype.split("_")
    numiters = config["iterations"] + 1
    return expand("features/{maternal}_"+alleles[0]+"_{paternal}_"+alleles[1]+".{coverage}x.{iteration}.features.txt", maternal=config["maternalhaps"], paternal=config["paternalhaps"], coverage=config["coveragevals"], iteration=range(1,numiters))

# create a fasta file with two haplotypes and deletion alleles specified in the file's name
rule create_genome:
    input:
    output:
        "genomes/{samplegenotype,[A-Za-z0-9_]+}.fasta"
    log:
        "logs/create_genome/{samplegenotype}.log"
    script:
        "scripts/create_genome.py"

# simulate reads with readlength, insertlength, and insertstddev specified in the config file, and
# reference genome file and coverage specified in the file name
rule run_art_for_kmers:
    input:
        "genomes/{samplegenotype}.fasta"
    output:
        temporary("simreads/{samplegenotype,[A-Za-z0-9_]+}.{coverage,[0-9]+}x.{iteration,[0-9]+}.1.fq"),
        temporary("simreads/{samplegenotype,[A-Za-z0-9_]+}.{coverage,[0-9]+}x.{iteration,[0-9]+}.2.fq")
    params:
        rl=config["readlength"],
        il=config["insertlength"],
        ilsig=config["insertstddev"],
    threads: 2
    log:
        "logs/simreads/{samplegenotype}.{coverage,[0-9]+}x.{iteration}.log"
    shell:
        """
        for i in $(seq {wildcards.iteration}); do sleep 1; done
        art_illumina -ss HS25 -f {wildcards.coverage} -l {params.rl} -m {params.il} -s {params.ilsig} -i {input} -na -d {wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}. -o simreads/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}. > {log} 2>&1 
        """

# calculate k-mer counts from the simulated reads
rule calculate_kmer_features:
    input:
        "simreads/{samplegenotype}.{coverage}x.{iteration}.1.fq",
        "simreads/{samplegenotype}.{coverage}x.{iteration}.2.fq"
    output:
        temporary("features/{samplegenotype,[A-Za-z0-9_]+}.{coverage,[0-9]+}x.{iteration,[0-9]+}.kmercounts.txt")
    params:
        kmerdb=config["targetkmers"],
    threads: 2
    log:
        "logs/features/kmercounts.{samplegenotype}.{coverage,[0-9]+}x.{iteration}.log"
    shell:
        """
        meryl intersect [union-sum output features/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration} [count simreads/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}.1.fq output features/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}.1] [count simreads/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}.2.fq output features/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}.2]] {params.kmerdb} output features/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}.targetkmercounts >>{log} 2>&1
        meryl print features/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}.targetkmercounts>{output} 2>>{log}
        rm -rf features/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}.targetkmercounts features/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}.1 features/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}.2 features/{wildcards.samplegenotype}.{wildcards.coverage}x.{wildcards.iteration}
        """

rule create_allkmer_file:
    input:
    output:
        "features/all_feature_kmers.txt"
    params:
        kmerdb=config["targetkmers"],
        prunefactor=config["prunefactor"],
    log:
        "logs/features/allkmercounts.log"
    shell:
        "meryl print {params.kmerdb} | awk 'NR==30*int(NR/30) {{print}}' > {output} 2>>{log}"

rule create_kmer_featurefile:
    input:
        "features/{samplegenotype}.{coverage}x.{iteration}.kmercounts.txt",
        "features/all_feature_kmers.txt"
    output:
        temporary("features/{samplegenotype,[A-Za-z0-9_]+}.{coverage,[0-9]+}x.{iteration,[0-9]+}.features.txt")
    log:
        "logs/features/featurefile.{samplegenotype}.{coverage,[0-9]+}x.{iteration}.log"
    script:
        "scripts/create_featurefile.py"

rule create_headerless_genotype_featurefile:
    input:
        component_geno_featurefiles
    output:
        "features/combined_feature_file.{genotype,[A-Z0-9_]+}.noheader.txt"
    log:
        "logs/features/combine_featurefiles.{genotype}.log"
    shell:
        "cat {input} > {output}"

rule create_genotype_featurefile:
    input:
        "features/combined_feature_file.{genotype}.noheader.txt",
        "features/all_feature_kmers.txt"
    output:
        "features/combined_feature_file.{genotype,[A-Z0-9_]+}.txt"
    log:
        "logs/features/combine_featurefiles_with_header.{genotype}.log"
    shell:
        "(awk '{{print $1}}' features/all_feature_kmers.txt | tr \"\n\" \"\t\"; echo \"Genotype\"; cat features/combined_feature_file.{wildcards.genotype}.noheader.txt ) > {output}"

# calculate k-mer counts from a test sample's reads
rule calculate_testsample_features:
    input:
        "testsamples/{prefix}.fastq"
    output:
        temporary("testsamples/{prefix,[A-Za-z0-9_.-]+}.kmercounts.txt")
    params:
        kmerdb=config["targetkmers"],
    threads: 2
    log:
        "logs/testsamples/kmercounts.{prefix}.log"
    shell:
        """
        meryl intersect [count testsamples/{wildcards.prefix}.fastq output testsamples/{wildcards.prefix}] {params.kmerdb} output testsamples/{wildcards.prefix}.targetkmercounts >>{log} 2>&1
        meryl print testsamples/{wildcards.prefix}.targetkmercounts>{output} 2>>{log}
        rm -rf testsamples/{wildcards.prefix}.targetkmercounts testsamples/{wildcards.prefix}
        """

rule create_testsample_featurefile:
    input:
        "testsamples/{prefix}.kmercounts.txt",
        "features/all_feature_kmers.txt"
    output:
        "testsamples/{prefix,[A-Za-z0-9_.-]+}.testsample.features.txt"
    log:
        "logs/testsamples/featurefile.{prefix}.log"
    script:
        "scripts/create_test_featurefile.py"

